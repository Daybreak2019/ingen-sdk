use { error } from common

type raw-fd = s32

record tcp-bind-options {
    backlog: u32,
    nonblocking: bool,
    reuse-address: bool,
}

record tcp-connect-options {
    local-endpoint: string,
    nonblocking: bool,
    connect-timeout-in-ms: u32,
    keep-alive-timeout-in-ms: u32,
    reuse-address: bool,
    send-buffer-size: u32,
    recv-buffer-size: u32,
}

enum shutdown-option {
    read,
    write,
    both,
}

resource socket {
    // creation
    static tcp-bind: func(endpoint: string, options: tcp-bind-options) -> expected<raw-fd, error>
    static tcp-connect: func(remote-endpoint: string, options: tcp-connect-options) -> expected<raw-fd, error>

    // shutdown
    static shutdown: func(fd: raw-fd, opt: shutdown-option) -> expected<unit, error>
    
    // socket opts
    static get-local-addr: func(fd: raw-fd) -> expected<string, error>
    static get-peer-addr: func(fd: raw-fd) -> expected<string, error>

    static get-ttl: func(fd: raw-fd) -> expected<u32, error>
    static set-ttl: func(fd: raw-fd, ttl: u32) -> expected<unit, error>

    static get-nodelay: func(fd: raw-fd) -> expected<bool, error>
    static set-nodelay: func(fd: raw-fd, nodelay: bool) -> expected<unit, error>

    static set-keepalive: func(fd: raw-fd, keepalive-in-ms: u32) -> expected<unit, error>

    // dns
    static nslookup: func(domain-name: string) -> expected<list<string>, error>
}